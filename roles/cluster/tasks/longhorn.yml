- name: Check dependencies
  ansible.builtin.include_tasks: dependencies.yml

- name: Taint the control plane node to avoid it being used for longhorn storage
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Node
      metadata:
        name: "{{ k3s_control_plane }}"
      spec:
        taints:
          - key: node-role.kubernetes.io/master
            effect: NoSchedule

- name: Get the longhorn CLI tool
  ansible.builtin.get_url:
    url: "{{ cluster_longhorn_cli_tool }}"
    dest: /usr/local/bin/longhornctl
    mode: "0755"
  become: true

- name: Check for prerequisites
  ansible.builtin.shell: >
    KUBECONFIG=~/.kube/config
    longhornctl check preflight
  register: longhorn_check
  changed_when: false

- name: Install longhorn prerequisites
  ansible.builtin.shell: >
    KUBECONFIG=~/.kube/config
    longhornctl install preflight
  when: longhorn_check.stderr is search("error:")
  changed_when: true

- name: Install the helm chart for Longhorn
  ansible.builtin.include_tasks:
    file: check_helm.yml
  vars:
    ch_release_name: longhorn
    ch_namespace: longhorn-system
    ch_chart_repo_url: https://charts.longhorn.io
    ch_chart_ref: longhorn
    ch_values: "{{ lookup('ansible.builtin.template', 'longhorn_values.yaml') }}"
    # ch_force: "{{ cluster_force }}" probably best not to uninstall longhorn

- name: Check for secret
  kubernetes.core.k8s_info:
    kind: Secret
    name: basic-auth
    namespace: longhorn-system
  register: longhorn_secret

- name: Create a password secret for longhorn
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -e -o pipefail
      echo -n "admin:$(echo -n {{ admin_password }}  | openssl passwd -stdin -apr1)" > /tmp/auth
  when: longhorn_secret.resources | length == 0
  changed_when: true

# TODO I need to get some CAS sorted
- name: Create a secret for longhorn
  ansible.builtin.command: |
    kubectl create secret generic basic-auth --from-file /tmp/auth -n longhorn-system
  when: longhorn_secret.resources | length == 0
  changed_when: true

- name: Create a longhorn ingress
  kubernetes.core.k8s:
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: longhorn-ingress
        namespace: longhorn-system
        annotations:
          # type of authentication
          nginx.ingress.kubernetes.io/auth-type: basic
          # prevent the controller from redirecting (308) to HTTPS
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
          # name of the secret that contains the user/password definitions
          nginx.ingress.kubernetes.io/auth-secret: basic-auth
          # message to display with an appropriate context why the authentication is required
          nginx.ingress.kubernetes.io/auth-realm: "Authentication Required "
          # custom max body size for file uploading like backing image uploading
          nginx.ingress.kubernetes.io/proxy-body-size: 10000m
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      spec:
        ingressClassName: nginx
        tls:
          - hosts:
              - longhorn.{{ k3s_cluster_domain }}
            secretName: longhorn-secret
        rules:
          # TODO THIS NEED TEMPLATING
          - host: longhorn.{{ k3s_cluster_domain }}
            http:
              paths:
                - backend:
                    service:
                      name: longhorn-frontend
                      port:
                        number: 80
                  path: /
                  pathType: ImplementationSpecific
