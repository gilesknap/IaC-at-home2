// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/python
{
	"name": "Python 3.12 Ansible Execution Environment",
	"build": {
		"dockerfile": "Dockerfile"
	},
	// enable ping to test connectivity
	"runArgs": [
		"--network=host",
		"--security-opt=label=disable"
	],
	// reserve some ports for port forwarding with kubectl - because when auto
	// port forward goes wrong things get nasty
	"appPort": [
		8443, // dashboard
		3000 // grafana
	],
	// make sure files are available for mounting
	"initializeCommand": "bash ${localWorkspaceFolder}/.devcontainer/initializeCommand",
	"features": {
		// add in eternal history and other bash features
		"ghcr.io/diamondlightsource/devcontainer-features/bash-config:1.0.2": {}
	},
	"customizations": {
		"vscode": {
			"extensions": [
				"streetsidesoftware.code-spell-checker-cspell-bundled-dictionaries",
				"redhat.ansible",
				"mhutchie.git-graph",
				"ms-kubernetes-tools.vscode-kubernetes-tools"
			]
		},
		// port forwarding is getting into loops - disabling until I can diagnose
		"settings": {
			"remote.autoForwardPorts": false,
			"remote.restoreForwardedPorts": false,
			"remote.forwardOnOpen": false
		}
	},
	// TODO - at present this only works for rootless - investigate how to do rootful
	// TODO - this will also affect the mounts
	// For rootless we must be root account
	"remoteUser": "root",
	// mount in useful files and configuration folders - those updated by ansible
	// are stored in volumes so they persist between container runs
	"mounts": [
		"source=iac2-bin,target=/root/bin,type=volume",
		"source=iac2-ssh,target=/root/.ssh,type=volume",
		"source=iac2-kube,target=/root/.kube,type=volume"
	],
	"remoteEnv": {
		"ZSHRC": "/bash-config/zshrc",
		"BIN_DIR": "/root/bin"
	},
	// For rootless leave the filesystem owned by root
	"updateRemoteUserUID": false,
	// One time global setup commands inside the container
	"postCreateCommand": "bash .devcontainer/postCreateCommand ${devcontainerId}",
	// Mount the parent of the project folder so we can access peer projects
	"workspaceMount": "source=${localWorkspaceFolder}/..,target=/workspaces,type=bind"
}